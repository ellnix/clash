{%- if debug_mode -%}
# READ_MANY
{% endif -%}

{% for cmt in comments -%}
# {{ cmt.variable }}: {{cmt.description}}
{% endfor -%}

let mut input_line = String::new();
io::stdin().read_line(&mut input_line).unwrap();
let inputs = input_line.split(" ").collect::<Vec<_>>();

{%- if single_type -%}
  {%- if debug_mode %}
# SINGLE_TYPE
  {%- endif -%}

{%- for var in vars -%}
  {%- if var.var_type == "String" or var.var_type == "Word" %}
let {{var.name}} = inputs[{{ loop.index - 1 }}].trim().to_string();
  {%- else %}
let {{var.name}} = parse_input!(inputs[{{ loop.index - 1 }}], {{ type_tokens[var.var_type] }});
  {%- endif %}
{%- endfor -%}

{%- else %}
  {%- if debug_mode -%}
{# This is the same as SINGLE_TYPE for rust #}
# MULTIPLE_TYPE
  {%- endif -%}

  {%- for var in vars -%}
    {%- if var.var_type == "String" or var.var_type == "Word" %}
let {{var.name}} = inputs[{{ loop.index - 1 }}].trim().to_string();
    {%- else %}
let {{var.name}} = parse_input!(inputs[{{ loop.index - 1 }}], {{ type_tokens[var.var_type] }});
    {%- endif -%}
  {%- endfor -%}

{%- endif %}
